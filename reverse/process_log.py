log = logging.getLogger(__name__)

class MonitorProcessLog(list):
    """Yields each API call event to the parent handler. Optionally it may
    beautify certain API calls."""

    def __init__(self, eventstream, modules):
        self.eventstream = eventstream
        self.modules = modules
        self.first_seen = None
        self.has_apicalls = False

    def init(self):
        self.services = {}
        self.vbe6_ptrs = {}
        self.vbe6_func = {}

    def _api_CElement_put_innerHTML(self, event):
        event["raw"] = "html",
        event["arguments"]["html"] = htmlprettify(event["arguments"]["html"])

    def _api_CDocument_write(self, event):
        event["raw"] = "lines",
        for idx, line in enumerate(event["arguments"]["lines"]):
            event["arguments"]["lines"][idx] = htmlprettify(line)

    def _api_CIFrameElement_CreateElement(self, event):
        """Lowercases the attribute keys."""
        attrs = {}
        for key, value in event["arguments"]["attributes"].items():
            attrs[key.lower()] = value

        event["arguments"]["attributes"] = attrs

    def _remember_service_name(self, event):
        """Keep track of the name of this service."""
        service_name = event["arguments"]["service_name"]
        # We've added logging of the service_handle to the API signature in
        # the Monitor, but for backwards compatibility we'll keep it as
        # follows for now.
        service_handle = "0x%08x" % event["return_value"]
        self.services[service_handle] = service_name

    _api_OpenServiceA = _remember_service_name
    _api_OpenServiceW = _remember_service_name
    _api_CreateServiceA = _remember_service_name
    _api_CreateServiceW = _remember_service_name

    def _add_service_name(self, event):
        service_name = self.services.get(event["arguments"]["service_handle"])
        event["arguments"]["service_name"] = service_name

    _api_StartServiceA = _add_service_name
    _api_StartServiceW = _add_service_name
    _api_ControlService = _add_service_name
    _api_DeleteService = _add_service_name

    # VBA Macro analysis stuff.

    def _vbe6_newobject(self, event):
        """Keep track which instance pointers belong to which classes."""
        this = event["arguments"]["this"]
        object_name = event["arguments"]["object_name"]

        self.vbe6_ptrs[this] = object_name

    _api_vbe6_CreateObject = _vbe6_newobject
    _api_vbe6_GetObject = _vbe6_newobject

    def _api_vbe6_StringConcat(self, event):
        pass

    def _api_vbe6_Import(self, event):
        # TODO Move this logic to the monitor.
        args = event["arguments"]
        if args["library"] == "VBE6.DLL" and not args["function"]:
            return False