import subprocess
import tempfile
import random
import os
import random
import string



def random_string(minimum, maximum=None):
    if maximum is None:
        maximum = minimum

    count = random.randint(minimum, maximum)
    return "".join(random.choice(string.ascii_letters) for x in range(count))

pipe = "\\??\\PIPE\\"+random_string(16, 32)
SHUTDOWN_MUTEX = "Global\\" + random_string(6, 10)

def subprocess_checkoutput(args, env=None):
    return subprocess.check_output(
        args, stdin=subprocess.PIPE, stderr=subprocess.PIPE, env=env,
    )

def subprocess_checkcall(args, env=None):
    return subprocess.check_call(
        args, stdin=subprocess.PIPE, stdout=subprocess.PIPE,
        stderr=subprocess.PIPE, env=env,
    )

def _encode_args(self, args):
    """Convert a list of arguments to a string that can be passed along
    on the command-line.
    @param args: list of arguments
    @return: the command-line equivalent
    """
    ret = []
    for line in args:
        if " " in line:
            ret.append('"%s"' % line)
        else:
            ret.append(line)
    return " ".join(ret)

def is32bit():    
    is32bit = r"C:\Users\karus\OneDrive\Desktop\test\is32bit.exe"
    filepath = r"C:\Users\karus\OneDrive\Desktop\test\inject-x64.exe"
    bitsize = int(subprocess_checkoutput([is32bit,"-f",filepath]))
    print(bitsize)

def inject():
    filepath = r"C:\Users\karus\OneDrive\Desktop\test\vs.exe"
    injector = r"C:\Users\karus\OneDrive\Desktop\test\inject-x86.exe"
    args = [injector, 
            "--app", filepath,
            "--only-start",] 
    output = subprocess_checkoutput(args, None)
    pid, tid = map(int, output.split())
    print(pid, tid)

    dllpath = r"C:\Users\karus\OneDrive\Desktop\test\monitor-x86.dll"
    args = [
            injector,
            "--dll", dllpath,
            "--config", drop_config(),
            "--pid", str(pid),
            "--apc", 
            "--tid", str(tid),
        ]
    subprocess_checkcall(args)

def drop_config(track=True, mode=None, trigger=None):
        """Helper function to drop the configuration for a new process."""
        fd, config_path = tempfile.mkstemp()

        # The first time we come up with a random startup-time.
        first_process = True
        if first_process: #Process.first_process:
            # This adds 1 up to 30 times of 20 minutes to the startup
            # time of the process, therefore bypassing anti-vm checks
            # which check whether the VM has only been up for <10 minutes.
            startup_time = random.randint(1, 30) * 20 * 60 * 1000

        lines = {
            "pipe": pipe, #self.config.pipe,
            "logpipe": "\\??\\PIPE\\"+random_string(16, 32), #self.config.logpipe,
            "analyzer": os.getcwd(),
            "first-process": "1" if first_process else "0",
            "startup-time": startup_time,
            "shutdown-mutex": SHUTDOWN_MUTEX,
            "force-sleepskip": "0", #self.config.options.get("force-sleepskip", "0"),
            "track": "1" if track else "0",
            "mode": mode or "",
            "disguise": "0", #self.config.options.get("disguise", "0"),
            "pipe-pid": "1",
            "trigger": (trigger or "").encode("utf8"),
        }

        for key, value in lines.items():
            os.write(fd, ("%s=%s\n" % (key, value)).encode("utf-8"))

        os.close(fd)

        # Only change the first_process attribute for processes that we
        # "track", i.e., the lsass.exe injection doesn't count.
        #if track:
        #    Process.first_process = False

        return config_path

if __name__ == "__main__":
    from privileges import grant_privilege
    from pipe import PipeServer, PipeDispatcher

    grant_privilege("SeDebugPrivilege")
    
    inject()
    
    
    command_pipe = PipeServer(
        PipeDispatcher, pipe, message=True,)
        #dispatcher=CommandPipeHandler(self))
    command_pipe.daemon = True
    command_pipe.start()
    
    